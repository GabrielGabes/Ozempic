tabelona = rbind(tabelona, tabelinha)
}
}
coluna
table(df$tipo_residuo)
df = df_backup %>% filter(uso_ozempic == 1)
table(df$uso_ozempic)
coluna_analisada = "residuo_gastrico"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,"Dose de ozempic",
"Tempo total de uso em meses",
"Tempo desde a ultima dose de ozempic em dias",
"tempo_uso_dias","tempo_uso_semanas",
"tempo_uso_dias2","uso_ozempic",
"Quantidade de resíduo")))]
df$`residuo_gastrico` = as.factor(df$`residuo_gastrico`)
tabelona = summary_num_cat("Idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
capture(tabelona)
#################
tabelona = analise_mod(glm(residuo_gastrico~uso_ozempic, family='binomial', data=df))
table(df$tipo_residuo)
df = df_backup %>% filter(uso_ozempic == 1)
table(df$uso_ozempic)
coluna_analisada = "residuo_gastrico"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,"Dose de ozempic",
"Tempo total de uso em meses",
"Tempo desde a ultima dose de ozempic em dias",
"tempo_uso_dias","tempo_uso_semanas",
"tempo_uso_dias2","uso_ozempic",
"Quantidade de resíduo")))]
df$`residuo_gastrico` = as.factor(df$`residuo_gastrico`)
tabelona = summary_num_cat("Idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
capture(tabelona)
#################
tabelona = analise_mod(glm(residuo_gastrico~Gênero, family='binomial', data=df))
tabelona$indice <- row.names(tabelona)
tabelona = tabelona[FALSE, ]
#row.names(tabelona) = 1:nrow(tabelona)
#tabelona <- tabelona[, c("indice", setdiff(names(tabelona), "indice"))]
for (coluna in lista_coluna){
tabelinha = analise_mod(glm(df[[coluna_analisada]]~df[[coluna]], family='binomial', data=df))
tabelinha$indice = row.names(tabelinha)
row.names(tabelinha) = 1:nrow(tabelinha)
tabelinha = tabelinha[, c("indice", setdiff(names(tabelinha), "indice"))]
if (class(df[[coluna]]) != "numeric"){
tabelinha[1,] = NA
tabelinha[["indice"]][1] = coluna
tabelinha <- rbind(tabelinha[1, ], NA, tabelinha[-1, ])
}
else{
tabelinha = tabelinha[-1,]
tabelinha[["indice"]][1] = coluna
}
tabelona = rbind(tabelona, tabelinha)
}
coluna
table(df$tipo_residuo)
df = df_backup %>% filter(uso_ozempic == 1)
table(df$uso_ozempic)
coluna_analisada = "residuo_gastrico"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,"Dose de ozempic",
"Tempo total de uso em meses",
"Tempo desde a ultima dose de ozempic em dias",
"tempo_uso_dias","tempo_uso_semanas",
"tempo_uso_dias2","uso_ozempic",
"Quantidade de resíduo","tipo_residuo")))]
df$`residuo_gastrico` = as.factor(df$`residuo_gastrico`)
tabelona = summary_num_cat("Idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
capture(tabelona)
#################
tabelona = analise_mod(glm(residuo_gastrico~Gênero, family='binomial', data=df))
tabelona$indice <- row.names(tabelona)
tabelona = tabelona[FALSE, ]
#row.names(tabelona) = 1:nrow(tabelona)
#tabelona <- tabelona[, c("indice", setdiff(names(tabelona), "indice"))]
for (coluna in lista_coluna){
tabelinha = analise_mod(glm(df[[coluna_analisada]]~df[[coluna]], family='binomial', data=df))
tabelinha$indice = row.names(tabelinha)
row.names(tabelinha) = 1:nrow(tabelinha)
tabelinha = tabelinha[, c("indice", setdiff(names(tabelinha), "indice"))]
if (class(df[[coluna]]) != "numeric"){
tabelinha[1,] = NA
tabelinha[["indice"]][1] = coluna
tabelinha <- rbind(tabelinha[1, ], NA, tabelinha[-1, ])
}
else{
tabelinha = tabelinha[-1,]
tabelinha[["indice"]][1] = coluna
}
tabelona = rbind(tabelona, tabelinha)
}
tabelona$`Pr(>|z|)` = sapply(tabelona$`Pr(>|z|)`, function(x) ifelse(is.na(x), NA, retorne_p(x)))
tabelona =  tabelona[, c(1, (ncol(tabelona) - 3):ncol(tabelona))]
capture(tabelona)
table(df$tipo_residuo)
df = df_backup %>% filter(tipo_residuo != 'liquido')
table(df$tipo_residuo)
coluna_analisada = "residuo_gastrico"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,
"Quantidade de resíduo",
"tipo_residuo")))]
df$`residuo_gastrico` = as.factor(df$`residuo_gastrico`)
tabelona = summary_num_cat("Idade", coluna_analisada)[FALSE, ]
table(df$tipo_residuo)
df = df_backup # %>% filter(tipo_residuo != 'liquido')
table(df$tipo_residuo)
coluna_analisada = "residuo_gastrico"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,
"Quantidade de resíduo",
"tipo_residuo")))]
df$`residuo_gastrico` = as.factor(df$`residuo_gastrico`)
tabelona = summary_num_cat("Idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
capture(tabelona)
#################
tabelona = analise_mod(glm(residuo_gastrico~uso_ozempic, family='binomial', data=df))
tabelona$indice <- row.names(tabelona)
tabelona = tabelona[FALSE, ]
#row.names(tabelona) = 1:nrow(tabelona)
#tabelona <- tabelona[, c("indice", setdiff(names(tabelona), "indice"))]
for (coluna in lista_coluna){
tabelinha = analise_mod(glm(df[[coluna_analisada]]~df[[coluna]], family='binomial', data=df))
tabelinha$indice = row.names(tabelinha)
row.names(tabelinha) = 1:nrow(tabelinha)
tabelinha = tabelinha[, c("indice", setdiff(names(tabelinha), "indice"))]
if (class(df[[coluna]]) != "numeric"){
tabelinha[1,] = NA
tabelinha[["indice"]][1] = coluna
tabelinha <- rbind(tabelinha[1, ], NA, tabelinha[-1, ])
}
else{
tabelinha = tabelinha[-1,]
tabelinha[["indice"]][1] = coluna
}
tabelona = rbind(tabelona, tabelinha)
}
tabelona$`Pr(>|z|)` = sapply(tabelona$`Pr(>|z|)`, function(x) ifelse(is.na(x), NA, retorne_p(x)))
tabelona =  tabelona[, c(1, (ncol(tabelona) - 3):ncol(tabelona))]
capture(tabelona)
normalidade_por_grupo_criterio("tempo_jejum_solidos", "residuo_gastrico")
medianas = as.data.frame(by(df$tempo_jejum_solidos, df$residuo_gastrico, median))
medianas
pvalor = retorne_p(wilcox.test(df$tempo_jejum_solidos~df$residuo_gastrico)$p.value)
minimo = min(df$tempo_jejum_solidos , na.rm=F)
minimo
maximo = max(df$tempo_jejum_solidos , na.rm=F)
maximo
ggplot(df, aes(x=tempo_jejum_solidos, fill=residuo_gastrico))+
geom_density(position='identity', alpha =0.6)+
theme_bw() +
theme(plot.title=element_text(face='italic'), axis.title=element_text(size=9, face='italic')) +
labs(title = "Fasting interval (Solids)", x="hours", y='Probabillity Density',
subtitle = paste0("P-value (Mann-Whitney) = ", pvalor),
fill = "Increased Residual\nGastric Content") +
scale_x_continuous(breaks=seq(from = 4, to = 31, by = 2)) +
geom_vline(data = medianas, aes(xintercept = x, color = as.factor(df$residuo_gastrico)),
linetype="dashed", size=1, color=c("#DF5474","#118ab2")) +
scale_fill_discrete(labels = c("No residue", "With residue"))  +
scale_fill_manual(values=c("#FD87BE","#0983B0"))
################
normalidade_por_grupo_criterio("tempo_jejum_liquidos", "residuo_gastrico")
medianas = as.data.frame(by(df$tempo_jejum_liquidos, df$residuo_gastrico, median))
medianas
pvalor = retorne_p(wilcox.test(df$tempo_jejum_liquidos~df$residuo_gastrico)$p.value)
minimo = min(df$tempo_jejum_liquidos , na.rm=T)
minimo
maximo = max(df$tempo_jejum_liquidos , na.rm=T)
maximo
ggplot(df, aes(x=tempo_jejum_liquidos, fill=residuo_gastrico))+
geom_density(position='identity', alpha =0.6)+
theme_bw() +
theme(plot.title=element_text(face='italic'), axis.title=element_text(size=9, face='italic')) +
labs(title = "Fasting interval (Liquids)", x="hours", y='Probabillity Density',
subtitle = paste0("P-value (Mann-Whitney) = ", pvalor)) +
scale_x_continuous(breaks=seq(from = 4, to = 31, by = 2)) +
geom_vline(data = medianas, aes(xintercept = x, color = as.factor(df$residuo_gastrico)),
linetype="dashed", size=1, color=c("#DF5474","#118ab2")) +
scale_fill_discrete(labels = c("No residue", "With residue"))  +
scale_fill_manual(values=c("#FD87BE","#0983B0"))
df$variavel_numerica = df$`Tempo desde a ultima dose de ozempic em dias`
normalidade_por_grupo_criterio("variavel_numerica", "residuo_gastrico")
medianas = as.data.frame(by(df$variavel_numerica, df$residuo_gastrico, median, na.rm=T))
medianas
pvalor = retorne_p(wilcox.test(df$variavel_numerica~df$residuo_gastrico)$p.value)
minimo = min(df$variavel_numerica, na.rm=T)
minimo
maximo = max(df$variavel_numerica, na.rm=T)
maximo
ggplot(df, aes(x=variavel_numerica, fill=residuo_gastrico))+
geom_density(position='identity', alpha =0.6)+
theme_bw() +
theme(plot.title=element_text(face='italic'), axis.title=element_text(size=9, face='italic')) +
labs(title = "Semaglutide interruption Time (days)", x="hours", y='Probabillity Density',
subtitle = paste0("P-value (Mann-Whitney) = ", pvalor)) +
scale_x_continuous(breaks=seq(from = 0, to = 31, by = 2)) +
geom_vline(data = medianas, aes(xintercept = x, color = as.factor(df$residuo_gastrico)),
linetype="dashed", size=1, color=c("#DF5474","#118ab2")) +
scale_fill_discrete(labels = c("No residue", "With residue"))  +
scale_fill_manual(values=c("#FD87BE","#0983B0"))
df$variavel_numerica = df$`Tempo desde a ultima dose de ozempic em dias`
normalidade_por_grupo_criterio("variavel_numerica", "residuo_gastrico")
medianas = as.data.frame(by(df$variavel_numerica, df$residuo_gastrico, median, na.rm=T))
medianas
pvalor = retorne_p(wilcox.test(df$variavel_numerica~df$residuo_gastrico)$p.value)
minimo = min(df$variavel_numerica, na.rm=T)
minimo
maximo = max(df$variavel_numerica, na.rm=T)
maximo
ggplot(df, aes(x=variavel_numerica, fill=residuo_gastrico))+
geom_density(position='identity', alpha =0.6)+
theme_bw() +
theme(plot.title=element_text(face='italic'), axis.title=element_text(size=9, face='italic')) +
labs(title = "Semaglutide Interruption Time (days)", x="hours", y='Probabillity Density',
subtitle = paste0("P-value (Mann-Whitney) = ", pvalor)) +
scale_x_continuous(breaks=seq(from = 0, to = 31, by = 2)) +
geom_vline(data = medianas, aes(xintercept = x, color = as.factor(df$residuo_gastrico)),
linetype="dashed", size=1, color=c("#DF5474","#118ab2")) +
scale_fill_discrete(labels = c("No residue", "With residue"))  +
scale_fill_manual(values=c("#FD87BE","#0983B0"))
table(df$tipo_residuo)
df = df_backup %>% filter(uso_ozempic == 1)
table(df$uso_ozempic)
coluna_analisada = "residuo_gastrico"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,"Dose de ozempic",
"Tempo total de uso em meses",
"Tempo desde a ultima dose de ozempic em dias",
"tempo_uso_dias","tempo_uso_semanas",
"tempo_uso_dias2","uso_ozempic",
"Quantidade de resíduo","tipo_residuo")))]
df$`residuo_gastrico` = as.factor(df$`residuo_gastrico`)
tabelona = summary_num_cat("Idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
capture(tabelona)
#################
tabelona = analise_mod(glm(residuo_gastrico~Gênero, family='binomial', data=df))
tabelona$indice <- row.names(tabelona)
tabelona = tabelona[FALSE, ]
#row.names(tabelona) = 1:nrow(tabelona)
#tabelona <- tabelona[, c("indice", setdiff(names(tabelona), "indice"))]
for (coluna in lista_coluna){
tabelinha = analise_mod(glm(df[[coluna_analisada]]~df[[coluna]], family='binomial', data=df))
tabelinha$indice = row.names(tabelinha)
row.names(tabelinha) = 1:nrow(tabelinha)
tabelinha = tabelinha[, c("indice", setdiff(names(tabelinha), "indice"))]
if (class(df[[coluna]]) != "numeric"){
tabelinha[1,] = NA
tabelinha[["indice"]][1] = coluna
tabelinha <- rbind(tabelinha[1, ], NA, tabelinha[-1, ])
}
else{
tabelinha = tabelinha[-1,]
tabelinha[["indice"]][1] = coluna
}
tabelona = rbind(tabelona, tabelinha)
}
tabelona$`Pr(>|z|)` = sapply(tabelona$`Pr(>|z|)`, function(x) ifelse(is.na(x), NA, retorne_p(x)))
tabelona =  tabelona[, c(1, (ncol(tabelona) - 3):ncol(tabelona))]
capture(tabelona)
df = df_backup
df$tamanho = df$`Quantidade de resíduo`
coluna_analisada = "tamanho"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,"Dose de ozempic",
"Tempo total de uso em meses",
"Tempo desde a ultima dose de ozempic em dias",
"tempo_uso_dias","tempo_uso_semanas",
"tempo_uso_dias2","uso_ozempic",
"Quantidade de resíduo","tipo_residuo")))]
df$`tamanho` = as.factor(df$`tamanho`)
tabelona = summary_num_cat("Idade", coluna_analisada)[FALSE, ]
df = df_backup
df$tamanho = df$`Quantidade de resíduo`
coluna_analisada = "tamanho"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,"Dose de ozempic",
"Tempo total de uso em meses",
"Tempo desde a ultima dose de ozempic em dias",
"tempo_uso_dias","tempo_uso_semanas",
"tempo_uso_dias2","uso_ozempic",
"Quantidade de resíduo","tipo_residuo")))]
tabelona = summary_num_cat("Idade", coluna_analisada)[FALSE, ]
coluna
tabelona
summary_num_cat("Idade", coluna_analisada)[FALSE, ]
summary_numerico_por_grupo_n_parametrico("Idade", coluna_analisada)
df = df_backup
df$tamanho = df$`Quantidade de resíduo`
coluna_analisada = "tamanho"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,"Dose de ozempic",
"Tempo total de uso em meses",
"Tempo desde a ultima dose de ozempic em dias",
"tempo_uso_dias","tempo_uso_semanas",
"tempo_uso_dias2","uso_ozempic",
"Quantidade de resíduo","tipo_residuo")))]
tabelona = summary_numerico_por_grupo_n_parametrico("Idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
coluna
setwd("C:/Users/Gabriel/Documents/Ozempic")
df <- read_excel("df.xlsx", sheet="Coleta de dados")
df <- rename(df, "residuo_gastrico" = "Resíduo gástrico")
df <- rename(df, "uso_ozempic" = "Uso de ozempic")
################################################
df$tempo_uso_dias = df$`Data do exame` - df$`Início do uso`
df$tempo_uso_dias = as.numeric(df$tempo_uso_dias)
class(df$tempo_uso_dias)
#df$tempo_uso_dias[df$tempo_uso_dias < 0] = df$`Tempo total de uso em meses`*30
df$tempo_uso_dias[df$tempo_uso_dias < 0 & !is.na(df$`Tempo total de uso em meses`)] = df$`Tempo total de uso em meses`*30
summary(df$tempo_uso_dias)
df$tempo_uso_semanas = df$tempo_uso_dias/7
summary(df$tempo_uso_semanas)
df$tempo_uso_dias2 = df$`Tempo total de uso em meses`*7
summary(df$tempo_uso_semanas2)
########################
summary(df$`Tempo total de uso em meses`)
hist(df$`Tempo total de uso em meses`)
#hist(df$`Tempo total de uso em meses`)
df$tempo_de_uso_cat = NA
df$tempo_de_uso_cat[is.na(df$`Tempo total de uso em meses`)] = 0
df$tempo_de_uso_cat[df$`Tempo total de uso em meses` <= 4] = 1
df$tempo_de_uso_cat[df$`Tempo total de uso em meses` > 4 & df$`Tempo total de uso em meses` <= 8] = 2
df$tempo_de_uso_cat[df$`Tempo total de uso em meses` > 8] = 3# & df$`Tempo total de uso em meses` <= 12] = 3
#df$tempo_de_uso_cat[df$`Tempo total de uso em meses` > 12] = 4
conti(df, "residuo_gastrico", "tempo_de_uso_cat", "row")
df$tempo_de_uso_cat = as.factor(df$tempo_de_uso_cat)
table(df$tempo_de_uso_cat)
################################################
df$`Broncoaspiração (Sim ou Não)` = NULL
df$`indicações de eda` = NULL
df$`Nome completo` = NULL
df$`número do caso` = NULL
df$`Data da ultima dose de ozempic` = NULL
df$`Data de nascimento` = NULL
df$Atendimento = NULL
df$`Data do exame` = NULL
df$`Início do jejum de líquidos` = NULL
df$`Início do jejum de sólidos` = NULL
df$`Início do uso` = NULL
df$`Início do procedimento` = NULL
df$`tempo_jejum_liquidos GABRIEL` = NULL
df$`tempo_jejum_solidos GABRIEL` = NULL
df$`Outras comorbidades` = NULL
df$`Cirurgia prévia` = NULL
df$`Medicações em uso` = NULL
df$`Tipo de resíduo` = NULL
df$`Origem do paciente (Unidade de internação, UTI, OS, Externo)` = NULL
df$Sintomas = NULL
df$`Tipo de anestesia (sedação, geral, ambas)` <- factor(df$`Tipo de anestesia (sedação, geral, ambas)`,
levels = c("sedacao","geral","ambas"))
################ PRÉ PROCESSAMENTOS ################################################
df$Altura = as.numeric(df$Altura)
df$Dislipidemia[is.na(df$Dislipidemia)] = 0
df$IMC[is.na(df$IMC)] = 0
df$HAS[is.na(df$HAS)] = 0
df$Diabetes[is.na(df$Diabetes)] = 0
df$Diabetes[is.na(df$Diabetes)] = 0
################################################
df$ozempic_sintomas = NA
df$ozempic_sintomas[df$uso_ozempic == 0 & df$sintomas_gabriel == 0] = 0
df$ozempic_sintomas[df$uso_ozempic == 1 & df$sintomas_gabriel == 1] = 1
df$ozempic_sintomas[df$uso_ozempic == 1 & df$sintomas_gabriel == 0] = 2
df$ozempic_sintomas[df$uso_ozempic == 0 & df$sintomas_gabriel == 1] = 3
df$ozempic_sintomas = as.factor(df$ozempic_sintomas)
#table(df$ozempic_sintomas)
################################################
df$tempo_suspencao = NA
df$tempo_suspencao[is.na(df$`Tempo desde a ultima dose de ozempic em dias`)] = 0
df$tempo_suspencao[df$`Tempo desde a ultima dose de ozempic em dias` <= 7] = 1
df$tempo_suspencao[df$`Tempo desde a ultima dose de ozempic em dias` > 7 & df$`Tempo desde a ultima dose de ozempic em dias` <= 14] = 2
df$tempo_suspencao[df$`Tempo desde a ultima dose de ozempic em dias` > 14 & df$`Tempo desde a ultima dose de ozempic em dias` <= 21] = 3
df$tempo_suspencao[df$`Tempo desde a ultima dose de ozempic em dias` > 21] = 4
df$tempo_suspencao = paste0("nivel_",df$tempo_suspencao)
#df$tempo_suspencao = df$tempo_suspencao + 1
df$tempo_suspencao = as.factor(df$tempo_suspencao)
table(df$tempo_suspencao)
table(df$`Ultima dose a mais de 7 dias`)
table(df$`Ultima dose a mais de 10 dias`)
table(df$`Ultima dose a mais de 14 dias`)
table(df$`Ultima dose a mais de 21 dias`)
################################################
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (length(levels(as.factor(df[[coluna]]))) == 2){
df[[coluna]] = as.factor(df[[coluna]])
}
}
}
#install.packages("writexl")
#library(writexl)
#df_backup = df
#write_xlsx(df, "df_backup.xlsx")
#df
#names(df)
coluna_analisada = "residuo_gastrico"
summary_num_cat("Idade", coluna_analisada)[FALSE, ]
summary_num_cat("Idade", coluna_analisada)
df = df_backup
df$tamanho = df$`Quantidade de resíduo`
coluna_analisada = "tamanho"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,"Dose de ozempic",
"Tempo total de uso em meses",
"Tempo desde a ultima dose de ozempic em dias",
"tempo_uso_dias","tempo_uso_semanas",
"tempo_uso_dias2","uso_ozempic",
"Quantidade de resíduo","tipo_residuo")))]
tabelona = summary_numerico_por_grupo_n_parametrico("Idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
